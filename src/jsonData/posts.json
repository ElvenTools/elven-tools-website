[{"fileName":"cli-introduction.html","title":"CLI Introduction","body":"<p>The CLI tools is a standard Node CLI program which you can install using the npm package manager. It is best to install it globally by:</p> <pre><code class=\"language-bash\">npm install elven-tools -g </code></pre> <h3>What is it?</h3> <ul>   <li>The CLI tool helps to:     <ul>       <li>deploy the NFT minter Smart Contract on the Elrond blockchain</li>       <li>interact with the NFT minter Smart Contract on the Elrond blockchain</li>     </ul>   </li> </ul> <p>For now it is designed to deploy the contract: <a href=\"https://github.com/juliancwirko/elven-nft-minter-sc\">elven-nft-minter-sc</a>.</p> <h3>How does it work?</h3> <p><strong>General how to:</strong></p> <ul>   <li><code>npm install elven-tools -g</code></li>   <li><code>elven-tools --version</code> or <code>elvent-tools -v</code></li>   <li><code>elven-tools --help</code> or <code>elven-tools -h</code> - for getting the commands on the root level</li>   <li><code>elven-tools nft-minter --help</code> or <code>elven-tools nft-minter -h</code> - for getting all the commands for the subcommand</li> </ul> <p><strong>Steps for deploying and interacting with the Smart Contract:</strong></p> <p>Be aware that, by default, all will happen on the devnet. See below how to change it. Also check out the <a href=\"/docs/jump-start.html\">Jump start section</a>.</p> <p>First steps:</p> <ol>   <li><code>elven-tools derive-pem</code> - you would need to generate the PEM file for all further operations, do not share it with anyone. It works similar to <code>erdpy wallet derive</code>. It will take the keyphrase and generate the <code>walletKey.pem</code> file in the same directory.</li>   <li><code>elven-tools deploy nft-minter</code> - by default, the tools will take the abi and wasm source code and deploy directly from the main branch of the smart contract. There are two options to work with it, though. You can configure a different branch or tag, or you can download the files and work on them locally.</li> </ol> <ul>   <li>For changing the branch, for example to <code>development</code> create the <code>.elventoolsrc</code> file in the same directory where the <code>walletKey.pem</code> file is located, put there <code>{ \"nftMinter\": { \"version\": \"development\" } }</code>. It can be also a tag name of the release in this <a href=\"https://github.com/juliancwirko/elven-nft-minter-sc\">GitHub repository</a>.</li>   <li>If you would like to work locally. For example, you cloned the Smart Contract and worked on your version. You can create a directory structure next to the <code>walletKey.pem</code>. It should look like: <code>sc/nft-minter</code>. Here you will need to put the .wasm and .abi.json files which you can get from the <a href=\"\">output</a> directory of the Smart Contract.</li>   <li>     This command takes a couple of arguments asking for them with prompts.     3 When the Smart Contract (check it in the explorer) is deployed, you need to create your collection token. You can do this by <code>elven-tools nft-minter issue-collection-token</code>. You will be asked for the name and the ticker. Keep the name without spaces and the ticker short and capitalized.   </li> </ul> <ol start=\"4\">   <li>Next step would be to add a 'create' role. You can do this by <code>elven-tools nft-minter set-roles</code></li>   <li>Then you can start the minting <code>elven-tools nft-minter start-minting</code> or setup a drop <code>elven-tools nft-minter set-drop</code> where the minting will be split into 'waves'. The first version of the Smart Contract mints randomly on demand and sends the NFT to the buyer. More advanced logic will land in version 2.</li>   <li>You can also mint the tokens using the same or different <code>walletKey.pem</code> for that run <code>elven-tools nft-minter mint</code>.</li>   <li>You can list all the commands using <code>elven-tools nft-minter --help</code>; below, you'll find all of them with short descriptions.</li> </ol> <h3>All Commands</h3> <ul>   <li><code>elven-tools derive-pem</code> - derives the PEM file from seed phrase (keywords)</li>   <li><code>elven-tools deploy nft-minter</code> - deploys the smart contract (by default from the main branch using the devnet, can be configured)</li>   <li><code>elven-tools nft-minter issue-collection-token</code> [only owner] - issue main collection handle, it costs 0.05 EGLD, and it is a must in the Elrond chain. All NFTs will be under this collection. The cost here is a one-time payment for the whole collection.</li>   <li><code>elven-tools nft-minter set-roles</code> [only owner] - for now, the command sets the critical role for the collection handle. It is a 'create nft' role.</li>   <li><code>elven-tools nft-minter start-minting</code> [only owner] - by default, after deploying the smart contract, the minting is disabled. You would need to start it</li>   <li><code>elven-tools nft-minter pause-minting</code> [only owner] - you can also pause it at any moment</li>   <li><code>elven-tools nft-minter set-new-price</code> [only owner] - you can set a new price per NFT for the whole collection</li>   <li><code>elven-tools nft-minter giveaway</code> [only owner] - as an owner, you can give some random tokens to other addresses.</li>   <li><code>elven-tools nft-minter set-drop</code> [only owner] - you can also split the minting into drops. These are 'waves' of minting where you can change prices and promote each one (v1 doesn't include any logic for revealing the CIDs with delay, the revealed NFTs will be sent in every drop).</li>   <li><code>elven-tools nft-minter unset-drop</code> [only owner] - you can also disable the drop and pause minting</li>   <li><code>elven-tools nft-minter claim-dev-rewards</code> [only owner] - as an owner of the Smart Contract, you can always claim the developer rewards. Read more about them in the Elrond docs.</li>   <li><code>elven-tools nft-minter change-base-cids</code> [only owner] - you can change base IPFS CIDs only before any NFT was minted. Otherwise, it doesn't make sense to do that.</li>   <li><code>elven-tools nft-minter set-new-tokens-limit-per-address</code> [only owner] - it is possible to change the limits per address which are configured when deploying the Smart Contract</li>   <li><code>elven-tools nft-minter claim-sc-funds</code> [only owner] - this is treated as a fallback for royalties, there is no way for now to implement other solution, the Smart Contract will receive the royalties as the creator, so there has to be a way to get them back. Generally, it shouldn't be required otherwise. Proper solutions will be with the <code>esdt_nft_create_as_caller</code>, which doesn't work yet.</li>   <li><code>elven-tools nft-minter shuffle</code> - as a user, you can take part and ensure that the minting is random. This transaction will reshuffle the next index to mint. Everyone can run it.</li>   <li><code>elven-tools nft-minter mint</code> - the main mint function, you can mint NFTs using any <code>walletKey.pem</code> file</li>   <li><code>elven-tools nft-minter get-total-tokens-left</code> - the Smart Contract query, returns amount of tokens left</li>   <li><code>elven-tools nft-minter get-provenance-hash</code> - the Smart Contract query returns the provenance hash if provided when deploying</li>   <li><code>elven-tools nft-minter get-drop-tokens-left</code> - the Smart Contract query returns the number of tokens left per drop</li>   <li><code>elven-tools nft-minter get-nft-price</code> - the Smart Contract query, returns the current price</li>   <li><code>elven-tools nft-minter get-nft-token-id</code> - the Smart Contract query, returns the collection token id</li>   <li><code>elven-tools nft-minter get-nft-token-name</code> - the Smart Contract query, returns the collection token name</li>   <li><code>elven-tools nft-minter get-tokens-limit-per-address</code> - the Smart Contract query returns the tokens limit per address</li>   <li><code>elven-tools nft-minter get-tokens-minted-per-address</code> - the Smart Contract query returns the number of tokens minted per one address</li> </ul> <h3>Custom configuration options</h3> <p>Below is an example of a <code>.elventoolsrc</code> config file with default values. It is not required if you will work on the devnet with the main branch of the Smart Contract. In other cases, you would need to have it. It should be located in the same directory from which the <code>elven-tools</code> commands are triggeredâ€”the same directory as the one where the <code>walletKey.pem</code> file is located.</p> <pre><code class=\"language-json\">{   \"chain\": \"devnet\",   \"customProxyGateway\": \"https://devnet-gateway.elrond.com\",   \"nftMinter\": {     \"version\": \"main\",     \"deployGasLimit\": 120000000,     \"issueCollectionTokenGasLimit\": 80000000,     \"issueValue\": \"0.05\",     \"assignRolesGasLimit\": 80000000,     \"issueTokenFnName\": \"issueToken\",     \"setLocalRolesFnName\": \"setLocalRoles\",     \"mintBaseGasLimit\": 10000000,     \"tokenSelingPrice\": \"\",     \"mintFnName\": \"mint\",     \"giveawayBaseGasLimit\": 10000000,     \"giveawayFnName\": \"giveaway\",     \"setDropFnName\": \"setDrop\",     \"setUnsetDropGasLimit\": 6000000,     \"unsetDropFnName\": \"unsetDrop\",     \"pauseUnpauseGasLimit\": 5000000,     \"pauseMintingFnName\": \"pauseMinting\",     \"unpauseMintingFnName\": \"startMinting\",     \"setNewPriceGasLimit\": 5000000,     \"setNewPriceFnName\": \"setNewPrice\",     \"shuffleFnName\": \"shuffle\",     \"shuffleGasLimit\": 5000000,     \"getTotalTokensLeftFnName\": \"getTotalTokensLeft\",     \"getProvenanceHashFnName\": \"getProvenanceHash\",     \"getDropTokensLeftFnName\": \"getDropTokensLeft\",     \"getNftPriceFnName\": \"getNftPrice\",     \"getNftTokenIdFnName\": \"getNftTokenId\",     \"getNftTokenNameFnName\": \"getNftTokenName\",     \"getTokensLimitPerAddressFnName\": \"getTokensLimitPerAddress\",     \"getTokensMintedPerAddressFnName\": \"getTokensMintedPerAddress\",     \"changeBaseCidsFnName\": \"changeBaseCids\",     \"changeBaseCidsGasLimit\": 5000000,     \"setNewTokensLimitPerAddressFnName\": \"setNewTokensLimitPerAddress\",     \"setNewTokensLimitPerAddressGasLimit\": 5000000,     \"claimScFundsFnName\": \"claimScFunds\",     \"claimScFundsGasLimit\": 6000000   } } </code></pre> <p><strong>Whole config with default values:</strong> <a href=\"https://github.com/juliancwirko/elven-tools-cli/blob/main/src/config.ts\">config.ts</a></p> <h3>Limitations and caveats</h3> <ul>   <li>there are main limitations related to the Smart Contract. Remember that it is most likely that this CLI tool won't be used only in a way that everyone would want to, be aware that you can always change the names of the endpoints in the Smart Contract. Then you can also use the config file and change them here in the CLI</li>   <li>Smart Contract in version 1 doesn't have many mechanisms which will strongly limit unwanted behaviors. It only implements random minting, but in version 2, there will be more mechanisms for fair launches.</li> </ul> <h3>Issues and ideas</h3> <p>Please post issues and ideas <a href=\"https://github.com/juliancwirko/elven-tools-cli/issues\">here</a>.</p> <h3>Contact</h3> <ul>   <li><a href=\"https://t.me/juliancwirko\">Telegram</a></li>   <li><a href=\"https://twitter.com/JulianCwirko\">Twitter</a></li>   <li>julian.cwirko@gmail.com</li> </ul>","excerpt":"","publicationDate":"2022-01-25","tags":["cli tool"],"coverImage":""},{"fileName":"jump-start.html","title":"Jump start","body":"<p>The Elven Tools includes the Smart Contract, CLI tool, and Landing page for NFT launches. Every part of it can be used as a separate tool. But the best is to use it all together. You can, of course, use the Smart Contract separately using, for example, erdpy, but the elven-tools cli gives you a lot of simplification with the process. You don't have to think about proper arguments because it will ask you for them. Let's see what the workflow could look like.</p> <p>Let's say that you want to prepare a collection generated randomly from .png layers. You can do this with many tools on the Internet. Btw, please take a look at my <a href=\"https://github.com/juliancwirko/nft-art-maker\">custom solution</a>.</p> <p>In the end, you will have a set of generated images and metadata JSON files corresponding to each. It can look like <code>1.png</code> and <code>1.json</code>. Then you would need to pack them and upload them to the IPFS. The IPFS is the only recommended decentralized hosting on the Elrond chain, at least for now. You can upload the files using for example the <a href=\"https://www.pinata.cloud/\">Pinata</a> or <a href=\"https://nft.storage/\">NFT.storage</a>. When you do that, you will get the CIDs, a <a href=\"https://docs.ipfs.io/concepts/content-addressing/\">content identifier</a> for your assets. With that, we can start using the elven-tools cli. Let's jump to it right now.</p> <p>First of all, you would need to install it globally. You need to set up the <a href=\"https://nodejs.org/en/\">Node</a> environment. The npm tool should be included. Then you would need to install the elven-tools CLI. You can do this by: <code>npm install -g elven-tools</code>.</p> <p>By default, the elven-tools cli will come with pre-configured options. The most important is the chain on which it works. It is set to the 'devnet' and the source of the minter Smart Contract. It is set to the 'main' branch of <a href=\"https://github.com/juliancwirko/elven-nft-minter-sc\">this</a> repo. So in simple words, you don't have to do any configuration to start with the nft minter Smart Contract on the devnet. I'll show you how to configure it for the other setup later.</p> <p>Let's focus on the devnet and the Smart Contract code from a remote source.</p> <p>What you need to do to start is to run the <code>elven-tools derive-pem</code>. You should have the elven-tools cli installed globally so accessible from everywhere in your env. The best would be to create a separate directory to work with it.</p> <pre><code class=\"language-bash\">elven-tools derive-pem âœ” Enter mnemonic (seed phrase)  â€¦ source crop brown mountain grace imitate cattle rice profit truck small soul castle prize tube spoil such topic code actor venue friend truck alien File saved as walletKey.pem </code></pre> <p>Derive PEM is a command which will take your seed phrase and create the key file for signing every transaction. Without it, you want to be able to use the elven-tools cli. The good thing is that you will need to do this only once. And then run every command in the same directory where the <code>walletKey.pem</code> file will land after running this command.</p> <div class=\"docs-error-box\">Don't share your PEM file with anyone. It is the main key to your walletâ€”the same as the seed phrases. The elven-tools don't send any data to the Internet. It works with it only in your local file system.</div> <p>After you generate the PEM file, you can run all other commands. Let's walk through the whole process here.</p> <p>The first command will be <code>elven-tools deploy nft-minter</code>. It takes the Smart Contract code from its repository and tries to deploy it on behalf of the user whose walletKey.pem file is generated in this directory. It will ask a couple of questions. Let's explain them here.</p> <pre><code class=\"language-bash\">elven-tools deploy nft-minter âœ” Decide if the contract can be upgraded in the future.  â€º Yes âœ” Decide if the contracts storage can be read by other contracts. Not recommended in this case.  â€º No âœ” Decide if the contract can receive funds. Recommended because of the royalties.  â€º Yes âœ” Provide the base IPFS CID:  â€¦ your_images_cid_here âœ” Provide the base metadata files IPFS CID:  â€¦ your_metadata_cid_here âœ” Provide the file extension:  â€º .png âœ” Provide amount of tokens in collection:  â€¦ 10000 âœ” Provide the seling price (ex. 0.5 for 0.5 EGLD):  â€¦ 0.5 âœ” Tokens limit per one address (ex 3 for three):  â€¦ 20 âœ” Provide the royalties value (ex. 20 for 20%) [optional]:  â€¦ 5 âœ” Provide tags (ex. tag1,tag2,tag3) [optional]:  â€¦ tag1,tag2 âœ” Provide the provenance hash (sha256 hash of all images) [optional]:  â€¦ here_provenance_hash_should_land Deployment transaction executed: success Transaction: https://devnet-explorer.elrond.com/transactions/8523c30d71add931802de94a7419bd06e27d56d09753166f9329dc555d7c9200 Smart Contract address: erd1qqqqqqqqqqqqqpgqehkqpewq76rxedwmdg78yaxcg24ey7vly8rs9hgn9u </code></pre> <p>You will be asked one by one. The prompts are helpful. You don't have to worry about proper arguments preparation. The first three questions are about metadata for code. You need to decide if your smart contract should be payable or upgradable. There are hints for that. You can also read about it <a href=\"https://docs.elrond.com/developers/developer-reference/code-metadata/\">here</a>.</p> <p>The following prompt is where you would need to provide your CIDs. It can be a different CID for metadata and images, but it can also be the same CID. It depends on how you store your files in the IPFS. Then you can also configure the file extension. There are a couple to choose from. After that, you will provide the total amount of tokens in your collection. Here is an example it is 10000. Next is the selling price. You can use the standard format here. For example, 0.5 is 0.5 EGLD. Then you would need to define how many tokens one address can mint. It is usually used to prevent a big player from buying the almost whole collection. Of course, it doesn't avoid minting on the different addresses, but it is always helpful. Then you can provide the royalties value. Use standard percent here, so 5 is a 5%. Then you can give the tags for the collection, and at the end, you can also provide the <a href=\"https://medium.com/coinmonks/the-elegance-of-the-nft-provenance-hash-solution-823b39f99473\">provenance hash</a>. It will also be queryable later.</p> <p>The following mandatory command which you would use is issuing the collection token. You can do this by running <code>elven-tools nft-minter issue-collection-token</code>. The token will be issued, and all will be saved in the <code>output.json</code> file in the same directory. Here you will be asked about the name of the collection and the ticker. It looks like that:</p> <pre><code class=\"language-bash\">elven-tools nft-minter issue-collection-token âœ” Enter the name for the collection token (ex. MyName123).  Avoid spaces and special characters  â€¦ TestCollectionName âœ” Enter the ticker for the collection token (ex. MYNAME).  Avoid spaces and special characters. Keep it short and capitalize.  â€¦ TCLN â ¼ Processing transaction... Transaction: https://devnet-explorer.elrond.com/transactions/762adbb2485697c5b20a09ca28ff6bd4f0b11238ce57bee99d24c8ebd7a1d826 Your collection token id:  TCLN-416d0e Also saved in the output.json file. </code></pre> <p>The last mandatory command is <code>elven-tools nft-minter set-roles</code>. It will assign the obligatory role, which allows for new NFT tokens creation. Here there won't be any prompts, at least for now. Only a transaction will take the token data from the output.json file and assign the roles.</p> <pre><code class=\"language-bash\">elven-tools nft-minter set-roles Transaction: https://devnet-explorer.elrond.com/transactions/b156ebc9f91a75c56ee5e1ae034c2e4ce09a9de16cde79f297221b457902e326 </code></pre> <p>The following steps can be different on what you want to achieve. You can start minting directly or set up so-called 'drops' where you will define how many tokens will be minted in one drop. You can also always start or pause the minting process. What is necessary is that the contract will always mint randomly in all cases. Let's see how it looks when we want just to start the minting: <code>elven-tools nft-minter start-minting</code> and <code>elven-tools nft-minter mint</code> You will be asked to provide how many tokens you would wish to mint. Remember that the Smart Contract will have limits per one address. See how to check them later in this article.</p> <pre><code class=\"language-bash\">elven-tools nft-minter start-minting âœ” Are you sure that you want to proceed?  â€º Yes â ¼ Processing transaction... Transaction: https://devnet-explorer.elrond.com/transactions/8260437c4a2296169cf7bd925f135223529029ad8e1b3f2b535ee7f07ef3672c  elven-tools nft-minter mint âœ” Provide how many tokens should be minted. Take into account possible limitations set on the Smart Contract (ex 3 for three tokens):  â€¦ 2 âœ” Are you sure that you want to proceed?  â€º Yes Transaction: https://devnet-explorer.elrond.com/transactions/15194f779bebc31babdc7711f685a4bf0560c9a0484f6e644a40a1a0ee2f94ef </code></pre> <p>Now let's see how to define a drop in which we will mint only 2500 of the whole 10k collection. <code>elven-tools nft-minter set-drop</code>. You will be asked to provide how many tokens per drop it should mint. After that, it will pause the minting process. You can also pause the minting at any time you want by <code>elven-tools nft-minter pause-minting</code>. You can also unset the drop by <code>elven-mint nft-minter unset-drop</code>. You'll find all the commands <a href=\"/docs/cli-introduction.html\">here</a>, and some of them will be described later in this article.</p> <pre><code class=\"language-bash\">elven-tools nft-minter set-drop âœ” Provide the amount of the tokens for the drop:  â€¦ 2500 Transaction: https://devnet-explorer.elrond.com/transactions/915a9b115d01dbc0026e91ab889284018bd51cee8a030804dbb5da600c1bdd25  elven-tools nft-minter mint âœ” Provide how many tokens should be minted. Take into account possible limitations set on the Smart Contract (ex 3 for three tokens):  â€¦ 2 âœ” Are you sure that you want to proceed?  â€º Yes Transaction: https://devnet-explorer.elrond.com/transactions/8954262fea15e63705d696fcfeb92874a4c10239703b5a6631fd7f989c494ba8 </code></pre> <h3>How to work with the Smart Contract locally?</h3> <p>In most cases, it is good to provide some modifications for the final version of the Smart Contract, such as changing the functions' names to make life harder for the bot's owners.</p> <p>It is good to build the Smart Contract locally and deploy it from the file system in such a case. It is possible by default with the Elven Tools CLI. You need to prepare the directory <code>sc/nft-minter</code> in the same place where you already have the <code>walletKey.pem</code> file and later the <code>output.json</code> file. The tree should look like that:</p> <pre><code class=\"language-bash\">. â”œâ”€â”€ output.json â”œâ”€â”€ sc â”‚   â””â”€â”€ nft-minter â”‚       â”œâ”€â”€ elven-nft-minter.abi.json â”‚       â””â”€â”€ elven-nft-minter.wasm â”œâ”€â”€ walletKey.pem </code></pre> <p>As you can see, we have the <code>.abi.json</code> and <code>.wasm</code> files there. You will find them in the <code>output</code> directory after building the Smart Contract locally, and the elven-tools cli tool will take them by default. Remember to only keep the same naming convention for the directories - <code>sc/nft-minter</code> and also run the <code>elven-tools</code> in the same directory.</p> <p>If you need some help working with the Smart Contract in the Elrond ecosystem, please check docs and my article <a href=\"https://www.julian.io/articles/elrond-smart-contracts.html\">here</a>.</p> <h3>How to use the configuration file?</h3> <p>The configuration file is optional, and you don't need it until you want to change the chain or the Smart Contract source, plus maybe after modifications functions names and gas limit for them. All default values are defined <a href=\"https://github.com/juliancwirko/elven-tools-cli/blob/main/src/config.ts\">here</a>, and below, you'll find the example of such a configuration file.</p> <p>The file should be named <code>.elventoolsrc,</code> or take any compatible name from the <a href=\"https://github.com/davidtheclark/cosmiconfig\">cosmiconfig</a> project. The main id should be elventools.</p> <pre><code class=\"language-json\">{     \"chain\": \"devnet\",     \"nftMinterSc\": {         \"version\": \"main\",         \"mintFnName\": \"mintMe\"     } } </code></pre> <p>In the example above, we define the chain as the 'devnet' (set by default), and we also define the version for the Smart Contract, which is its main' (selected by default) branch in its repository. It can also be a tag name. Then we also define the new name for the 'mint' function. You can also change names for other functions and set up different gas limits for them.</p> <p><strong>You will find all possible options <a href=\"/docs/cli-introduction.html#custom-configuration-options\">here</a>.</strong></p> <h3>Good to know</h3> <p>The Elven Tools CLI can list all the available commands for every subcommand. You can do: <code>elven-tools --help</code> or <code>elven-tools nft-minter --help</code>. You can always check the installed version by <code>elven-tools --version</code>.</p> <p>Every step will update the <code>output.json</code> file. So, for example, the Smart Contract address will be put there and the collection token ticker. If you already deployed the Smart Contract without using the Elven Tools CLI, you can always configure it in the <code>.elventoolsrc</code> file using the config: <code>{ \"nftMinterSc\": { \"deployNftMinterSC\": \"&#x3C;sc_address_here>\" } }</code>.</p> <p>Not all the commands trigger a Smart Contract transaction. There are also public queries for the Smart Contract, for example:</p> <pre><code class=\"language-bash\">get-total-tokens-left get-provenance-hash get-drop-tokens-left get-nft-price get-nft-token-id get-nft-token-name get-tokens-limit-per-address get-tokens-minted-per-address </code></pre> <p>With them, you can get simple information written in the Smart Contract. You can also access them through API. Read more about it <a href=\"https://docs.elrond.com/sdk-and-tools/rest-api/virtual-machine/\">here</a>.</p> <p>Elven Tools will also provide the landing page for the NFT launch, which will be strictly integrated with the Smart Contract. It will have a lot of useful widgets. There are also plans to write more articles on how to run it with the performance in mind. It will come later.</p> <h3>Where to go from here?</h3> <p>This part of the docs had one purpose: to guide you through the process step by step. There is also a video which shows it. So I recommend you to check it out:</p> <p>From here you can read more detailed docs on:</p> <ul>   <li><a href=\"/docs/cli-introduction.html#custom-configuration-options\">CLI configuration options</a></li>   <li><a href=\"/docs/cli-introduction.html#all-commands\">CLI possible commands</a></li>   <li><a href=\"/docs/sc-endpoints.html\">Smart Contract endpoints</a></li> </ul> <p>If you still don't know how to use it, please feel free to contact me on <a href=\"https://twitter.com/JulianCwirko\">Twitter</a> or <a href=\"https://t.me/juliancwirko\">Telegram</a>. You can also write an e-mail to me: julian.cwirko@gmail.com</p>","excerpt":"","publicationDate":"2022-01-25","tags":["intro"],"coverImage":""},{"fileName":"landing-page.html","title":"Landing page","body":"<p>Landing page based on the <a href=\"https://nextjs.org/\">Next</a> framework.</p> <div class=\"docs-info-box\">The landing page template is still in progress. There isn't any official repository yet.</div> <h3>Why Next?</h3> <p>There are a couple of reasons, the most important are:</p> <ol>   <li>Based on React, which is well known and most popular</li>   <li>Offers static sites generation or/and server-side rendering. Very important when it comes to landing pages and SEO.</li>   <li>Optimized with the Web Standards in mind. There are many tools for optimizing the assets loading and overall performance.</li>   <li>Simple PWA and Service Workers configuration is essential for optimization.</li>   <li>A lot of plugins and excellent development experience.</li> </ol> <h3>What will you get?</h3> <ol>   <li>Fully functional and optimized template to be used with the Next framework</li>   <li>Widgets, which will be used to make transactions and display collection-related information.</li>   <li>Guides on optimizing the website to avoid common performance problems using the official gateway and APIs.</li>   <li>Later, more advanced tools and guides on the blockchain interactions and the performance.</li> </ol> <h3>Stay tuned!</h3>","excerpt":"","publicationDate":"2022-01-25","tags":["landing page"],"coverImage":""},{"fileName":"sc-endpoints.html","title":"Endpoints","body":"<p>Below you'll find all endpoints with a short description. You can always see the complete code <a href=\"https://github.com/juliancwirko/elven-nft-minter-sc\">here</a>.</p> <p>Please check all attributes for each endpoint in the linked code line in the repository. It is all open-source.</p> <h3>Only owner endpoints</h3> <p>Only the owner of the Smart Contract can call them. In such a Smart Contract, there are quite a lot of them.</p> <ul>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L22\">init</a> - standard init endpoint, it will be triggered on deployment and upgrade</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L72\">issueToken</a> - required endpoint for creating a new collection, this is done once, and the token is one for one smart contract instance. It is a handler for the whole collection. You can read more about it <a href=\"https://docs.elrond.com/developers/nft-tokens/#issuance-of-non-fungible-tokens\">here</a></li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L104\">setLocalRoles</a> - Set roles set only one role for now. The required one for creating the NFTs.</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L120\">pauseMinting</a> - You can pause the minting process in any moment you need.</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L129\">startMinting</a> - You will need to start the minting process after deploying the contract and each time you use the pauseMinting function</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L137\">setDrop</a> - You can set the 'drop' by defining how many tokens per drop will be minted</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L147\">unsetDrop</a> - You can unset the drop in any time. Minting will continue without limits.</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L157\">setNewPrice</a> - You can change the price for each NFT at any time. The best is to do this when configuring the next drop.</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L166\">changeBaseCids</a> - You can change the CIDs for images and metadata, but only when there is no NFTs minted yet. Otherwise, it doesn't make sense because the collection will be unsynchronized.</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L185\">setNewTokensLimitPerAddress</a> - You can change the limit of tokens per single address in any given time.</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L193\">giveaway</a> - You can organize the giveaway by providing the address and amount of tokens to send. It will mint and send tokens without the payment.</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L220\">claimScFunds</a> - You can claim the funds which are there on the payable Smart Contract. For example, royalties paid by marketplaces.</li> </ul> <h3>Endpoints for all</h3> <ul>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L235\">mint</a> - The main mint/buy function. The smart contract works like a candy machine. You pay, and it randomly mints the NFT for you. Then it sends it into your wallet. The NFTs on the Elrond network are ESDT standardized tokens.</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L367\">shuffle</a> - To be more transparent, the Smart Contract has a public endpoint that allows everyone to trigger the shuffling mechanism which is also triggered after every mint. This additional functionality ensures that the process is random, and anyone can set the following index.</li> </ul> <h3>Smart Contract queries</h3> <ul>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L508\">getDropTokensLeft</a> - This query will return the tokens left for the active drop.</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L517\">getTotalTokensLeft</a> - This query will return total amount of tokens left to mint</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L527\">getNftTokenId</a> - This query will return the collection token ticker</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L531\">getNftTokenName</a> - This query will return the collection token name</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L535\">getNftPrice</a> - This query will return the price for a single NFT</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L543\">getTokensLimitPerAddress</a> - This query will return the limit of tokens for a single address</li>   <li><a href=\"https://github.com/juliancwirko/elven-nft-minter-sc/blob/main/src/lib.rs#L547\">getTokensMintedPerAddress</a> - This query will return tokens already minted per single address</li> </ul> <h3>How to interact with endpoints</h3> <p>The simplest way is to use the Elven Tools CLI, check how in the <a href=\"/docs/jump-start.html\">Jump start</a> article or the <a href=\"/docs/cli-introduction.html\">CLI introduction</a>.</p> <p>If you don't want to use the CLI, you need to do the queries and transaction calls using the <a href=\"https://github.com/ElrondNetwork/elrond-sdk-erdjs\">erdjs SDK</a>.</p> <p>Check the examples:</p> <ul>   <li><a href=\"https://github.com/ElrondNetwork/elrond-sdk-erdjs#creating-smart-contract-transactions\">Smart Contract transaction</a></li>   <li><a href=\"https://github.com/ElrondNetwork/elrond-sdk-erdjs#querying-smart-contracts\">Smart Contract query</a></li> </ul> <p>You can also check the <a href=\"https://github.com/juliancwirko/elven-tools-cli\">elven-tools-cli</a> source code, where I also used the erdjs SDK.</p> <p>With the landing page, you will get all of these as widgets.</p>","excerpt":"","publicationDate":"2022-01-24","tags":["smart contract"],"coverImage":""},{"fileName":"sc-introduction.html","title":"SC Introduction","body":"<p>NFT minter Smart Contract v1</p> <div class=\"docs-error-box\">Be aware that the Smart Contract doesn't have any audits, and because it is pretty new, there wasn't a lot of testing either. You will use it at your own risk!</div> <p>You are reading about the Smart Contract designed for the Elrond blockchain. Its primary purpose is to provide a simple logic for minting and buying NFT tokens from a previously configured collection. It does it in a randomized way.</p> <h3>Version 1 supports</h3> <ul>   <li>issuing the collection token</li>   <li>setting the create role</li>   <li>pausing/unpausing the process</li>   <li>random mint and distribution</li>   <li>minting multiple NFTs in one transaction</li>   <li>giveaway options</li>   <li>possibility to split the process into drops/waves</li>   <li>claiming the developer rewards</li>   <li>changing basic setup where it is possible</li> </ul> <p>The smart contract works like a candy machine. In short, the user can pay in EGLD and, in return, will get randomly minted tokens from the previously configured collection. The amount of tokens per address is configured on the smart contract.</p> <h3>Ways of using it</h3> <p>The best way of using it will be with <a href=\"/docs/cli-introduction.html\">Elven Tools CLI tool</a>. It has a lot of valuable functions integrated with the smart contract, so deploying or interacting is simple. You can deploy the smart contract directly from its repository. Almost no coding skills are required in this case.</p> <p>You can also take a more standard path and use <a href=\"https://docs.elrond.com/sdk-and-tools/erdpy/erdpy/\">erdpy</a> for that. Erdpy is an official CLI SDK for Elrond blockchain based on Python. For more information, check the <a href=\"https://www.julian.io/articles/elrond-smart-contracts.html\">blog post</a>.</p> <h3>Limitations and caveats</h3> <ul>   <li>Remember that it is most likely that because of the open-source nature of this Smart Contract, it won't be used only in a way that everyone would want to, be aware that you can always change the names of the endpoints in the Smart Contract. You can even deploy a couple of them. In the last minutes before the mint decide to use one of them. This will limit the bots. Remember always to inform which one is the official one.</li>   <li>Smart Contract in version 1 doesn't have many mechanisms which will strongly limit unwanted behaviors. It only implements random minting, but in version 2, there will be more mechanisms for fair launches.</li> </ul> <div class=\"next-page-link\">Next: <a href=\"/docs/sc-functions.html\">SC functions review</a></div>","excerpt":"","publicationDate":"2022-01-25","tags":["smart contract"],"coverImage":""}]